std::vector<std::shared_ptr<Object>> objects; std::vector<std::shared_ptr<Light>> lights;

    auto white = std::make_shared<Matte>(Spectrum(.73f, .73f, .73f), 1.f);
    auto red = std::make_shared<Matte>(Spectrum(.75, .25, .25), 1.f);
    auto blue = std::make_shared<Matte>(Spectrum(.25, .25, .75), 1.f);
    auto green = std::make_shared<Matte>(Spectrum(.12, .45, .15), 1.f);
    auto black = std::make_shared<Matte>(Spectrum(.01, .01, .01), 1.f);
    auto metal_silver = std::make_shared<Metal>(Spectrum(0.041000, 0.059582, 0.040000), Spectrum(4.8025, 3.5974, 2.6484), 0.1);
    auto metal_gold = std::make_shared<Metal>(Spectrum(0.13100, 0.42415, 1.3831), Spectrum(4.0624, 2.4721, 1.9155), 0.1);
    auto plastic = std::make_shared<Plastic>(Spectrum(0.294, 0.f, 0.509), Spectrum(1.f, 1.f, 1.f), 0.01);
    Spectrum lightColor = 8.0f * Spectrum(0.747f+0.058f, 0.747f+0.258f, 0.747f) + 15.6f * Spectrum(0.740f+0.287f,0.740f+0.160f,0.740f) + 18.4f * Spectrum(0.737f+0.642f,0.737f+0.159f,0.737f);

    auto roughGlass = std::make_shared<Glass>(Spectrum(1.f), Spectrum(1.f), 0.05f, 1.5f);

    auto light = make_shared<XZRect>(213, 343, 227, 332, 554, nullptr);
    auto diffuseLight = make_shared<DiffuseAreaLight>(lightColor, 1, light, false);

    auto media = std::make_shared<HomogeneousMedium>(0.001, 0.0012, 0.0);
    /*
    std::string model = "../models/bunny/bunny.obj";
    std::string mtl_path = "../models/bunny/";
    TriangleMesh bunny = TriangleMesh(model, mtl_path, black);
    ObjectList list;
    for (int s = 0; s < bunny.Triangles.size(); s++) {
        list.add(make_shared<Triangle>(bunny.Triangles[s]));
    }
    */
    ObjectList list;
    list.add(std::make_shared<YZRect>(0, 555, 0, 555, 555, red));
    list.add(std::make_shared<YZRect>(0, 555, 0, 555, 0, blue));
    list.add(std::make_shared<XZRect>(0, 555, 0, 555, 0, white));
    list.add(std::make_shared<XZRect>(0, 555, 0, 555, 555, white));
    list.add(std::make_shared<XYRect>(0, 555, 0, 555, 555, white));
    list.add(std::make_shared<XZRect>(213, 343, 227, 332, 554, nullptr));
    list.add(std::make_shared<Sphere>(Point3f(138.75, 150, 138.75), 100, plastic));
    list.add(std::make_shared<Sphere>(Point3f(416.25, 150, 138.75), 100, roughGlass));
    list.add(std::make_shared<Sphere>(Point3f(138.75, 350, 416.25), 100, metal_gold));
    list.add(std::make_shared<Sphere>(Point3f(416.25, 350, 416.25), 100, white));

    // objects.push_back(std::make_shared<BVH>(list, 0, 1));
    objects.push_back(std::make_shared<BVH>(list, 0, 1));
    lights.push_back(diffuseLight);